docker build -t nies14/fleurproductapiservice .

kubectl apply -f .\productapi-depl.yaml
kubectl get deployments ----failed
kubectl get pods    ----failed
kubectl delete -f .\productapi-depl.yaml

changed in yaml file

kubectl apply -f .\productapi-depl.yaml
kubectl get deployments              ----success
kubectl get pods

//after creating the nodeport service file
kubectl apply -f .\productapi-np-srv.yaml
kubectl get service--------------after giving the command see the port and add that port to url and access that via postman




kubectl create secret generic mssql --from-literal=SA_PASSWORD="Tanvir14"

kubectl apply -f .\mssql-plat-depl.yaml
docker build -t nies14/fleurproductapiservice .
kubectl rollout restart deployment productapiservice-depl

kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.3.0/deploy/static/provider/aws/deploy.yaml
kubectl get deployments --namespace=ingress-nginx
kubectl get pods --namespace=ingress-nginx
kubectl apply -f .\ingress-srv.yaml

//for front end
docker build -t nies14/fleurfrontend .
kubectl apply -f .\fleurfrontend-depl.yaml
kubectl apply -f .\ingress-srv.yaml

//for identity
docker build -t nies14/identityapiservice .
kubectl apply -f .\identityapi-depl.yaml
kubectl apply -f .\ingress-srv.yaml



